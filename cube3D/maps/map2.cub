/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   validate_map.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dcologgi <dcologgi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/10/29 14:34:54 by riccardobor       #+#    #+#             */
/*   Updated: 2023/11/14 17:07:51 by dcologgi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/cube.h"

static int	body(char **map, int x, int y)
{
	int	res;

	res = 0;
	if (map[y][x] != '-' && map[y][x] != '1')
	{
		if (map[y][x + 1] == '\0' || map[y + 1] == NULL ||
				x - 1 < 0 || y - 1 < 0)
			res = 1;
		else
		{
			map[y][x] = '-';
			if (map[y][x + 1] != '1')
				res = body(map, x + 1, y);
			if (map[y][x - 1] != '1' && res != 1)
				res = body(map, x - 1, y);
			if (map[y + 1][x] != '1' && res != 1)
				res = body(map, x, y + 1);
			if (map[y - 1][x] != '1' && res != 1)
				res = body(map, x, y - 1);
		}
	}
	return (res);
}

static int	flood_algorithm(char **map)
{
	int	pl[2];

	find_char(map, pl);
	return (body(map, pl[0], pl[1]));
}

static int	np(char **map)
{
	int	i;
	int	j;
	int	n;

	i = 0;
	n = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			if (map[i][j] == 'N' || map[i][j] == 'S'
				|| map[i][j] == 'E' || map[i][j] == 'W')
				n++;
			j++;
		}
		if (n > 1)
			return (0);
		i++;
	}
	return (1);
}

int	validate_map(t_cube *game)
{
	int		i;
	int		j;
	int		d;
	int		res;
	char	**map2;

	i = -1;
	d = 0;
	while (game->map[++i])
	{
		j = -1;
		while (game->map[i][++j] != '\0')
		{
			if (!valid_char("NWES01D \n", game->map[i][j]) || !np(game->map))
				return (1);
			if (game->map[i][j] == 'D')
				d++;
		}
	}
	map2 = malloc(sizeof(char *) * (ft_matlen(game->map) + 1));
	ft_matcopy(game->map, map2, 0);
	res = flood_algorithm(map2);
	free_mat(map2);
	game->door = ft_calloc(d, sizeof(t_door));
	return (res);
}








/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cub3d.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: enoviell <enoviell@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/10/29 14:31:04 by riccardobor       #+#    #+#             */
/*   Updated: 2023/11/16 17:03:58 by enoviell         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/cube.h"

int	end_game(t_cube *game)
{
	free_mat(game->map);
	free(game->door);
	exit(0);
}

static int	game_loop(t_cube *game)
{
	t_ray		ray;
	static int	lock = 0;

	if (lock == 100)
	{
		ft_memset(&ray, 0, sizeof(t_ray));
		raycast(game, game->img, &ray);
		render_minimap(game);
		mlx_put_image_to_window(game->mlx, game->mlx_win,
			game->img->img, 0, 0);
		lock = 0;
	}
	else
		lock++;
	return (0);
}

static int	argv_check(char *argv)
{
	int	i;

	if (!argv)
		return (0);
	i = 0;
	while (argv[i])
		i++;
	i -= 1;
	if (argv[i] == 'b' && argv[i - 1] == 'u'
		&& argv[i - 2] == 'c' && argv[i - 3] == '.')
		return (1);
	return (0);
}

int	main(int argc, char **argv)
{
	t_cube			game;
	t_player		player;
	t_img			img;
	t_textures		texts;

	if (argc != 2)
		return (printf("Error: bad arguments.\n"));
	if (argv_check(argv[1]) == 0)
		return (printf("Error: Invalid  format\n"));
	init_cube(&game, &img, &texts, argv[1]);
	init_texture(&game, &texts);
	init_directions(&game, &player);
	mlx_hook(game.mlx_win, 17, 0, end_game, &game);
	mlx_hook(game.mlx_win, 2, 1L << 0, key_filter, &game);
	mlx_loop_hook(game.mlx, game_loop, &game);
	mlx_loop(game.mlx);
}